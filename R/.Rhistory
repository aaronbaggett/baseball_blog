load("~/Dropbox/Umpire IRT Study/Data/pfx_13.Rda")
library(dplyr)
library(ggplot2)
pfx_13 %>%
group_by(zone) %>%
filter(zone <= 9) %>%
filter(stand == "R") %>%
summarize(min_px = min(px), mean_px = mean(px), max_px = max(px), sd_px = sd(px))
pfx_13 %>%
group_by(zone) %>%
filter(zone <= 9) %>%
filter(stand == "L") %>%
summarize(min_px = min(px), mean_px = mean(px), max_px = max(px), sd_px = sd(px))
nels <- read.csv("/Users/AB/Dropbox/UMHB/Teaching/Spring 2015/PSYC 4316/Data/nels_data.csv")
lm(grades ~ pared, data = nels)
# Load package library
library(ggplot2)
library(dplyr)
# Construct scatterplot of grades by pared
ggplot(data = nels, aes(x = pared, y = grades)) +
geom_point() + geom_jitter() + geom_abline(intercept = 64.17, slope = 1.16)
# Construct scatterplot of grades by pared
ggplot(data = nels, aes(x = pared, y = grades)) +
geom_point() + geom_jitter() + geom_abline(intercept = 64.17, slope = 1.16, line = "tomato")
# Construct scatterplot of grades by pared
ggplot(data = nels, aes(x = pared, y = grades)) +
geom_point() + geom_jitter() + geom_abline(intercept = 64.17, slope = 1.16, color = "tomato")
# ===========================================================
# R Code
# Exploring Baseball Data with R
# Post: Title
# 02/16/2015
# ===========================================================
# Load package libraries
library(ggplot2)
library(dplyr, warn.conflicts = FALSE)
library(lme4, quietly = TRUE)
# Read in 2014 PITCHf/x data
load(url("http://aaronbaggett.com/data/pfx_14.rda"))
pfx_14 %>%
group_by(zone) %>%
filter(zone <= 9) %>%
summarize(min_px = min(px),
mean_px = mean(px),
max_px = max(px),
sd_px = sd(px))
(pfx_accuracy <- pfx_14 %>%
group_by(umpire) %>%
summarize(accuracy = mean(u_test_pfx),
se = sd(u_test_pfx) / sqrt(length(u_test_pfx)))
)
# Calculate mean *accuracy*
with(pfx_accuracy, mean(accuracy))
# Calculate sd *accuracy*
with(pfx_accuracy, sd(accuracy))
with(pfx_accuracy, min(accuracy))
with(pfx_accuracy, max(accuracy))
sort_pfx_accuracy <- pfx_accuracy[order(-pfx_accuracy$accuracy), ]
sort_pfx_accuracy
((1.57*2 + 17) / 12) / 2
17/12
17/12/2
17/12
0.8391667*2
1.42/2
0.708*2
(new_pfx_accuracy <- pfx_14 %>%
group_by(umpire) %>%
summarize(accuracy = mean(u_test),
se = sd(u_test) / sqrt(length(u_test)))
)
# Calculate mean *accuracy*
with(new_pfx_accuracy, mean(accuracy))
# Calculate sd *accuracy*
with(new_pfx_accuracy, sd(accuracy))
92.42-86.41
# Sort *pfx_accuracy* in descending order
sort_new_pfx_accuracy <- new_pfx_accuracy[order(-new_pfx_accuracy$accuracy), ]
### --- Build dot plot --- ###
ggplot(data = sort_new_pfx_accuracy,
aes(x = accuracy, y = sort(umpire, decreasing = TRUE))) +
geom_vline(aes(xintercept = mean(accuracy)),
color = "red", linetype = 2, size = 0.35) +
geom_segment(aes(x = accuracy - se, xend = accuracy + se,
y = sort(umpire, decreasing = TRUE),
yend = sort(umpire, decreasing = TRUE)),
color = "gray30", size = 0.25) +
geom_line(aes(group = 1), color = "gray30") +
geom_point(color = "gray10") +
scale_x_continuous(limits = c(0.78, 0.95), breaks = seq(0.78, 0.95, 0.010),
name = "\nUmpire Decision Accuracy\nWidth of Strike Zone = 17 inches") +
scale_y_discrete(name = "", labels = rev(sort_pfx_accuracy$umpire)) +
theme_bw() +
theme(axis.title.x = element_text(size = 10),
axis.text.x = element_text(size = 8)) +
theme(axis.title.y = element_text(size = 10),
axis.text.y = element_text(size = 6))
# Sort *pfx_accuracy* in descending order
sort_new_pfx_accuracy <- new_pfx_accuracy[order(-new_pfx_accuracy$accuracy), ]
### --- Build dot plot --- ###
ggplot(data = sort_new_pfx_accuracy,
aes(x = accuracy, y = sort(umpire, decreasing = TRUE))) +
geom_vline(aes(xintercept = mean(accuracy)),
color = "red", linetype = 2, size = 0.35) +
geom_segment(aes(x = accuracy - se, xend = accuracy + se,
y = sort(umpire, decreasing = TRUE),
yend = sort(umpire, decreasing = TRUE)),
color = "gray30", size = 0.25) +
geom_line(aes(group = 1), color = "gray30") +
geom_point(color = "gray10") +
scale_x_continuous(limits = c(0.85, 0.955), breaks = seq(0.85, 0.955, 0.010),
name = "\nUmpire Decision Accuracy\nWidth of Strike Zone = 20.14 inches") +
scale_y_discrete(name = "", labels = rev(sort_pfx_accuracy$umpire)) +
theme_bw() +
theme(axis.title.x = element_text(size = 10),
axis.text.x = element_text(size = 8)) +
theme(axis.title.y = element_text(size = 10),
axis.text.y = element_text(size = 6))
# How many games does an umpire work behind the plate in a single season?
games <- pfx_14 %>%
group_by(umpire) %>%
#filter(length(call) > 1000) %>%
summarize(games = length(unique(gameday_link)))
games %>%
summarize(mean = mean(games), sd = sd(games))
games
# How many pitches do umpires view during the course a single game?
pitches <- pfx_14 %>%
group_by(umpire) %>%
#filter(length(call) > 1000) %>%
summarize(games = length(unique(gameday_link)),
n = length(gameday_link), pitches = n/games)
pitches %>%
summarize(mean_n = mean(n), sd_n = sd(n),
mean = mean(pitches), sd = sd(pitches))
pitches
# How many games does an umpire work behind the plate in a single season?
games <- pfx_14 %>%
group_by(umpire) %>%
filter(length(call) > 1000) %>%
summarize(games = length(unique(gameday_link)))
games %>%
summarize(mean = mean(games), sd = sd(games))
# What's the mean and SD decisions umires make during games?
decisions <- pfx_14 %>%
group_by(umpire) %>%
#filter(length(call) > 1000) %>%
filter(call == "Called Strike" | call == "Ball") %>%
summarize(games = length(unique(gameday_link)),
n = length(gameday_link), decisions = n/games)
decisions %>%
summarize(mean_n = mean(n), sd_n = sd(n),
mean = mean(decisions), sd = sd(decisions))
decisions %>%
summarize(mean = mean(decisions), sd = sd(decisions))
92.46*146.08
146.08/92.46
92.46/146.08
pitches
decisions
(new_pfx_accuracy <- pfx_14 %>%
group_by(umpire) %>%
summarize(accuracy = mean(u_test),
se = sd(u_test) / sqrt(length(u_test)))
)
decisions %>%
summarize(mean_n = mean(n), sd_n = sd(n),
mean = mean(decisions), sd = sd(decisions))
decisions
decisions %>%
summarize(mean = mean(decisions), sd = sd(decisions))
decisions
decisions %>%
summarize(mean = mean(decisions), sd = sd(decisions))
0.9242*146.08
0.8641*146.08
135.0071-126.2277
(0.9242*146.08) - (0.8641*146.08)
getwd()
pfx_14 %>%
group_by(zone) %>%
filter(zone <= 9) %>%
summarize(min_px = min(px),
mean_px = mean(px),
max_px = max(px),
sd_px = sd(px))
